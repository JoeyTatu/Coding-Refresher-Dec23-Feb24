package main

import (
	"fmt"
	"io"
	"log"
	"net/http"
	"strconv"
)

func addCommas(num int) string {
	numStr := strconv.Itoa(num)
	var result string

	for i := len(numStr); i > 0; i-- {
		result = string(numStr[i-1]) + result
		if i > 1 && (len(numStr)-i+1)%3 == 0 {
			result = "," + result
		}
	}

	return result
}

func getWorldPopulation() (int, error) {
	url := "https://world-population.p.rapidapi.com/worldpopulation"

	req, err := http.NewRequest("GET", url, nil)
	if err != nil {
		return 0, err
	}

	req.Header.Add("X-RapidAPI-Key", "f1dddda76fmshd79bccd7b51b7f4p1a44b3jsn259a2291f848")
	req.Header.Add("X-RapidAPI-Host", "world-population.p.rapidapi.com")

	res, err := http.DefaultClient.Do(req)
	if err != nil {
		return 0, err
	}
	defer res.Body.Close()

	if res.StatusCode != http.StatusOK {
		return 0, fmt.Errorf("unexpected status code: %d", res.StatusCode)
	}

	body, err := io.ReadAll(res.Body)
	if err != nil {
		return 0, err
	}

	worldPop, err := strconv.Atoi(string(body))
	if err != nil {
		return 0, err
	}

	return worldPop, nil
}

func main() {
	worldPop, err := getWorldPopulation()
	if err != nil {
		log.Fatalf("Error: %v", err)
	}

	if worldPop < 1 {
		log.Fatal("Invalid input. Please enter a valid number")
	}

	// Continue halving until there is 1 left
	for stage := 1; worldPop > 1; stage++ {
		fmt.Printf("Stage %d: %s\n", stage, addCommas(worldPop))
		worldPop = worldPop / 2
	}

	// Print the final 1
	fmt.Printf("Stage %d: %s\n", worldPop, addCommas(worldPop))
}
